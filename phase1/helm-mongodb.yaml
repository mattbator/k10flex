apiVersion: v1
items:
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1Ea3lNREUxTXpZeE1Wb1hEVE15TURreE56RTFNell4TVZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVNCCmwveHIrRkcrQ1E3YVRadmxDbDVock41UllVb0pHTWZHWUg4bXpBUG40bE01dmdpS3AwZTBlcEVsVGRnUkVhQzkKaVNlOVJ2OFFQcGxyOFZWckJDR1cvYWhMZHZDTktBTHQ4aStHOE1QOE5zanNBaHFmMHVRWXMxZ241VUJNM2VtRwp6NnZnNlNOMEF5SFhMNzNhZ05DbHE3VkFMMEk0eEVXY212UGVvbUEyUU1walZNR0NZQ3J1SFB5T3hEZTkrSTlkCk9ISWpTamVwVVdEeFdHQXgzL2phRlVZUzZuSGJKeFJsYWs0SHJSV2gyM09rTkQ4MTlMZkVYdGxreFBDNEs5NU8KUG9IMDhqSUFPRzAvSWswN001NjMwY2RkenBZdDVrK2p3NXF3Vm85eWlDWGh5N3M4V0NEemoyT2xaZ252T25LUApFZ3RkK0t3ZnhjeVhmZWhNRGVzQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKYldwSGE2dWFLV2xtN1J5Tm9mMnZHRDRSdG9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDUTgydE83OUg0ZFVxeGlCTTFSVk9yclA5MU1aN2ZvKzRERjhNczJXR1d0VkFqeUlCVAphalB1SWs5L2dPaGlqUnhobjdHT1ZOQldmM2RIc1doUDN3WVlJVDZOY2tMb2FkRTRjV1dzZTRpSEtRSWx2TDBOCk5BWW9DcUxicXQ3UXJweWJqS04reWREVmJwTVNic2lUSG5GY3M0Y0NZaExLR3RBZEsvSlhZU3ZjWko1RkdHeUwKdWVUZE0xT2puZ25WRGlxTklyb0d0M01ZMHM3d0ViUmRtUHAxQ0JCUm1lQ1dWRWljQVkvMEMySWVtRTN6NFdUTQpmVzNESGUxWVFRZ1FXelZXdUpaaWlIT0N2SElCOXZkaDJzZVRTQlNyL0VRTkVvNE5zdjNMdkdDdVV0clBqOWZ6CnVyNWxYMjJwQnpWUHFERkxpdWEwQVRNOGgrYmRMK1Q4ME1iQQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    namespace: bGFiLW5zLTI=
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkltRndVbWhwVlZKcmMwVlBSMnRpUjNoR1RsaFFSMnMwVWpWcVNrcEJVRGQzYVRGNVp6WklRWEJhVFRRaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpzWVdJdGJuTXRNaUlzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVmpjbVYwTG01aGJXVWlPaUprWldaaGRXeDBMWFJ2YTJWdUxUSnNiRFZzSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWJtRnRaU0k2SW1SbFptRjFiSFFpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1MWFXUWlPaUl4TVdGaU9UTTNOaTB6WWpRMkxUUmtZMll0WW1ZelpDMDBZVGt5WkdGaE5HVTRNallpTENKemRXSWlPaUp6ZVhOMFpXMDZjMlZ5ZG1salpXRmpZMjkxYm5RNmJHRmlMVzV6TFRJNlpHVm1ZWFZzZENKOS5jZHNyMkdnU2l6dHhYUHZGb0JqZnh6ckRSQTFOYTR3LTRSX19vblhadHZVSTFtOVdvT0FPWjFZRnBWVjRvRnFHVWFETnBySC1wU1NWdHFHTXpMWWFVdHVFSW1YaFNiZGpvYWt5MFlWdlFwVzFURlladlZmaW1FTENBb0c1c1NmcGtaSTlsYWVpaE5RbkxUNzNDc0I3RzF4bDVrLTRRSGVFVTNEUXhwQXBqQjhPMlRWaEdadGM1ZjlMRTdYNWdOUHMtUDRYMVFRM1dURHgzcnBQYTR3ZVI0MG5HeGtXbkRsTFhVVjZldGdTbENuNDc3WXoxUDV3VUN5SGlKRmtlZWphVGVJY2VuUHRBN0hPZkUtWVdvbDZncnNQYVZjc2p5Sjc5WDBWOERuX21PWXJjQVFnc2hxcXFGTEg4dUFzc2I0YlViYTVtZTE1TWR2V0FpSHpNQ3o5WlE=
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: default
      kubernetes.io/service-account.uid: 11ab9376-3b46-4dcf-bf3d-4a92daa4e826
    creationTimestamp: "2022-09-27T16:44:54Z"
    name: default-token-2ll5l
    namespace: lab-ns-2
    resourceVersion: "1788031"
    uid: b17bf94e-5fce-4bd8-82a4-618adf6cd642
  type: kubernetes.io/service-account-token
- apiVersion: v1
  data:
    mongodb-replica-set-key: TFVDcU1ITlpvcQ==
    mongodb-root-password: RVJSQ1lJdTM5dQ==
  kind: Secret
  metadata:
    annotations:
      meta.helm.sh/release-name: helm-mongodb
      meta.helm.sh/release-namespace: lab-ns-2
    creationTimestamp: "2022-09-27T16:54:01Z"
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-13.1.5
    name: helm-mongodb
    namespace: lab-ns-2
    resourceVersion: "1789767"
    uid: 451fe10c-f7f1-4241-a87d-ccf04f8e53fe
  type: Opaque
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1Ea3lNREUxTXpZeE1Wb1hEVE15TURreE56RTFNell4TVZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVNCCmwveHIrRkcrQ1E3YVRadmxDbDVock41UllVb0pHTWZHWUg4bXpBUG40bE01dmdpS3AwZTBlcEVsVGRnUkVhQzkKaVNlOVJ2OFFQcGxyOFZWckJDR1cvYWhMZHZDTktBTHQ4aStHOE1QOE5zanNBaHFmMHVRWXMxZ241VUJNM2VtRwp6NnZnNlNOMEF5SFhMNzNhZ05DbHE3VkFMMEk0eEVXY212UGVvbUEyUU1walZNR0NZQ3J1SFB5T3hEZTkrSTlkCk9ISWpTamVwVVdEeFdHQXgzL2phRlVZUzZuSGJKeFJsYWs0SHJSV2gyM09rTkQ4MTlMZkVYdGxreFBDNEs5NU8KUG9IMDhqSUFPRzAvSWswN001NjMwY2RkenBZdDVrK2p3NXF3Vm85eWlDWGh5N3M4V0NEemoyT2xaZ252T25LUApFZ3RkK0t3ZnhjeVhmZWhNRGVzQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKYldwSGE2dWFLV2xtN1J5Tm9mMnZHRDRSdG9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDUTgydE83OUg0ZFVxeGlCTTFSVk9yclA5MU1aN2ZvKzRERjhNczJXR1d0VkFqeUlCVAphalB1SWs5L2dPaGlqUnhobjdHT1ZOQldmM2RIc1doUDN3WVlJVDZOY2tMb2FkRTRjV1dzZTRpSEtRSWx2TDBOCk5BWW9DcUxicXQ3UXJweWJqS04reWREVmJwTVNic2lUSG5GY3M0Y0NZaExLR3RBZEsvSlhZU3ZjWko1RkdHeUwKdWVUZE0xT2puZ25WRGlxTklyb0d0M01ZMHM3d0ViUmRtUHAxQ0JCUm1lQ1dWRWljQVkvMEMySWVtRTN6NFdUTQpmVzNESGUxWVFRZ1FXelZXdUpaaWlIT0N2SElCOXZkaDJzZVRTQlNyL0VRTkVvNE5zdjNMdkdDdVV0clBqOWZ6CnVyNWxYMjJwQnpWUHFERkxpdWEwQVRNOGgrYmRMK1Q4ME1iQQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    namespace: bGFiLW5zLTI=
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkltRndVbWhwVlZKcmMwVlBSMnRpUjNoR1RsaFFSMnMwVWpWcVNrcEJVRGQzYVRGNVp6WklRWEJhVFRRaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpzWVdJdGJuTXRNaUlzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVmpjbVYwTG01aGJXVWlPaUpvWld4dExXMXZibWR2WkdJdGRHOXJaVzR0TW5aM2FtTWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzV1WVcxbElqb2lhR1ZzYlMxdGIyNW5iMlJpSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWRXbGtJam9pTVRSak1tVTRNamt0WVRBd1lpMDBOVFl4TFRsbE5HWXRNelUyT0dRek9EUXpNalpqSWl3aWMzVmlJam9pYzNsemRHVnRPbk5sY25acFkyVmhZMk52ZFc1ME9teGhZaTF1Y3kweU9taGxiRzB0Ylc5dVoyOWtZaUo5LmwySUlhdThsS2xXdEx2TmlzZEpKYUkxandCaGJXV19ENll6T0ZmNnNjeEdxMlBNWkJST3ByQmx4STNIOVBWZUt1bzJOSGxEZ0RkTnhkaDFXMVQ0YWM0WFpPRzZlT2FnVTVEZkdCQ0dKcVpiU3A1WWN6N1l6V0tzLU0yUEh5NU9BNnpOTXRUcWc3MGM5THEzZkp3NUt4RjVjd0MxdVJWeXpUQVFkQmxSN21qSXJob0dOcy1YcVh0dHNpVnFYdW9HWS1lYmhBajlxVW81b0RGbUhlVDdTZkZnWm5nVjFnNGVITkhXS3VTOENtLUFtdFZlRGlKSUZUQThRUV9qSEw0ZzVVMldScHFRS0RZMmNpbVNhWmFnRjBUMXkwWUZOQlR1dWg4ZEwtX0FmQ0x3dDFHMVBtNUc2clVNVUlNbmcyZU54V25vajhXNGVEZGF4YXZkWlU0M3RBUQ==
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: helm-mongodb
      kubernetes.io/service-account.uid: 14c2e829-a00b-4561-9e4f-3568d384326c
    creationTimestamp: "2022-09-27T16:54:01Z"
    name: helm-mongodb-token-2vwjc
    namespace: lab-ns-2
    resourceVersion: "1789765"
    uid: c99fbbeb-77f8-450b-858b-6e04a431b9a3
  type: kubernetes.io/service-account-token
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2022-09-27T16:54:01Z"
    labels:
      modifiedAt: "1664297641"
      name: helm-mongodb
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.helm-mongodb.v1
    namespace: lab-ns-2
    resourceVersion: "1789796"
    uid: 5d7a6765-bdd0-438a-9b49-9d68dfb4da8e
  type: helm.sh/release.v1
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2022-09-27T16:54:01Z"
    generateName: helm-mongodb-
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      controller-revision-hash: helm-mongodb-7df87cc68
      helm.sh/chart: mongodb-13.1.5
      statefulset.kubernetes.io/pod-name: helm-mongodb-0
    name: helm-mongodb-0
    namespace: lab-ns-2
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: helm-mongodb
      uid: ee37dbbe-7314-496d-a29c-d1d138d6eac7
    resourceVersion: "1789932"
    uid: e52970b7-11b7-4473-866c-d52f7b1c01fa
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: mongodb
                app.kubernetes.io/instance: helm-mongodb
                app.kubernetes.io/name: mongodb
            namespaces:
            - lab-ns-2
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - command:
      - /scripts/setup.sh
      env:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: K8S_SERVICE_NAME
        value: helm-mongodb-headless
      - name: MONGODB_INITIAL_PRIMARY_HOST
        value: helm-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
      - name: MONGODB_REPLICA_SET_NAME
        value: rs0
      - name: MONGODB_ADVERTISED_HOSTNAME
        value: $(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
      - name: MONGODB_ROOT_USER
        value: root
      - name: MONGODB_ROOT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mongodb-root-password
            name: helm-mongodb
      - name: MONGODB_REPLICA_SET_KEY
        valueFrom:
          secretKeyRef:
            key: mongodb-replica-set-key
            name: helm-mongodb
      - name: ALLOW_EMPTY_PASSWORD
        value: "no"
      - name: MONGODB_SYSTEM_LOG_VERBOSITY
        value: "0"
      - name: MONGODB_DISABLE_SYSTEM_LOG
        value: "no"
      - name: MONGODB_DISABLE_JAVASCRIPT
        value: "no"
      - name: MONGODB_ENABLE_JOURNAL
        value: "yes"
      - name: MONGODB_PORT_NUMBER
        value: "27017"
      - name: MONGODB_ENABLE_IPV6
        value: "no"
      - name: MONGODB_ENABLE_DIRECTORY_PER_DB
        value: "no"
      image: docker.io/bitnami/mongodb:6.0.1-debian-11-r11
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bitnami/scripts/ping-mongodb.sh
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      name: mongodb
      ports:
      - containerPort: 27017
        name: mongodb
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bitnami/scripts/readiness-probe.sh
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/mongodb
        name: datadir
      - mountPath: /bitnami/scripts
        name: common-scripts
      - mountPath: /scripts/setup.sh
        name: scripts
        subPath: setup.sh
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-px7pm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: helm-mongodb-0
    nodeName: ip-192-168-28-141.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: helm-mongodb
    serviceAccountName: helm-mongodb
    subdomain: helm-mongodb-headless
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: datadir
      persistentVolumeClaim:
        claimName: datadir-helm-mongodb-0
    - configMap:
        defaultMode: 360
        name: helm-mongodb-common-scripts
      name: common-scripts
    - configMap:
        defaultMode: 493
        name: helm-mongodb-scripts
      name: scripts
    - name: kube-api-access-px7pm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4d617c8ddc3c95808c4597abcc47bcbaa2d93c3ebd39e947eeb28ca9254b3c51
      image: bitnami/mongodb:6.0.1-debian-11-r11
      imageID: docker-pullable://bitnami/mongodb@sha256:db5dba8b08569fcfe0c707c5e795ed7d6a835d3214cde94f16485fb3bf0a7e3a
      lastState: {}
      name: mongodb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2022-09-27T16:54:17Z"
    hostIP: 192.168.28.141
    phase: Running
    podIP: 192.168.30.118
    podIPs:
    - ip: 192.168.30.118
    qosClass: BestEffort
    startTime: "2022-09-27T16:54:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2022-09-27T16:54:39Z"
    generateName: helm-mongodb-
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      controller-revision-hash: helm-mongodb-7df87cc68
      helm.sh/chart: mongodb-13.1.5
      statefulset.kubernetes.io/pod-name: helm-mongodb-1
    name: helm-mongodb-1
    namespace: lab-ns-2
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: helm-mongodb
      uid: ee37dbbe-7314-496d-a29c-d1d138d6eac7
    resourceVersion: "1790067"
    uid: cc1bca99-6d8a-44af-a992-d1d77c31453c
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: mongodb
                app.kubernetes.io/instance: helm-mongodb
                app.kubernetes.io/name: mongodb
            namespaces:
            - lab-ns-2
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - command:
      - /scripts/setup.sh
      env:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: K8S_SERVICE_NAME
        value: helm-mongodb-headless
      - name: MONGODB_INITIAL_PRIMARY_HOST
        value: helm-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
      - name: MONGODB_REPLICA_SET_NAME
        value: rs0
      - name: MONGODB_ADVERTISED_HOSTNAME
        value: $(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
      - name: MONGODB_ROOT_USER
        value: root
      - name: MONGODB_ROOT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mongodb-root-password
            name: helm-mongodb
      - name: MONGODB_REPLICA_SET_KEY
        valueFrom:
          secretKeyRef:
            key: mongodb-replica-set-key
            name: helm-mongodb
      - name: ALLOW_EMPTY_PASSWORD
        value: "no"
      - name: MONGODB_SYSTEM_LOG_VERBOSITY
        value: "0"
      - name: MONGODB_DISABLE_SYSTEM_LOG
        value: "no"
      - name: MONGODB_DISABLE_JAVASCRIPT
        value: "no"
      - name: MONGODB_ENABLE_JOURNAL
        value: "yes"
      - name: MONGODB_PORT_NUMBER
        value: "27017"
      - name: MONGODB_ENABLE_IPV6
        value: "no"
      - name: MONGODB_ENABLE_DIRECTORY_PER_DB
        value: "no"
      image: docker.io/bitnami/mongodb:6.0.1-debian-11-r11
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bitnami/scripts/ping-mongodb.sh
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      name: mongodb
      ports:
      - containerPort: 27017
        name: mongodb
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bitnami/scripts/readiness-probe.sh
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/mongodb
        name: datadir
      - mountPath: /bitnami/scripts
        name: common-scripts
      - mountPath: /scripts/setup.sh
        name: scripts
        subPath: setup.sh
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pzt79
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: helm-mongodb-1
    nodeName: ip-192-168-60-70.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: helm-mongodb
    serviceAccountName: helm-mongodb
    subdomain: helm-mongodb-headless
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: datadir
      persistentVolumeClaim:
        claimName: datadir-helm-mongodb-1
    - configMap:
        defaultMode: 360
        name: helm-mongodb-common-scripts
      name: common-scripts
    - configMap:
        defaultMode: 493
        name: helm-mongodb-scripts
      name: scripts
    - name: kube-api-access-pzt79
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:55:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:55:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:45Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0e3f6b4bebfd6927cb07334936ff53e5b5f7dfe618e6cd44be257530146824f1
      image: bitnami/mongodb:6.0.1-debian-11-r11
      imageID: docker-pullable://bitnami/mongodb@sha256:db5dba8b08569fcfe0c707c5e795ed7d6a835d3214cde94f16485fb3bf0a7e3a
      lastState: {}
      name: mongodb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2022-09-27T16:54:55Z"
    hostIP: 192.168.60.70
    phase: Running
    podIP: 192.168.50.89
    podIPs:
    - ip: 192.168.50.89
    qosClass: BestEffort
    startTime: "2022-09-27T16:54:45Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2022-09-27T16:54:01Z"
    generateName: helm-mongodb-arbiter-
    labels:
      app.kubernetes.io/component: arbiter
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      controller-revision-hash: helm-mongodb-arbiter-6dd54c4d96
      helm.sh/chart: mongodb-13.1.5
      statefulset.kubernetes.io/pod-name: helm-mongodb-arbiter-0
    name: helm-mongodb-arbiter-0
    namespace: lab-ns-2
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: helm-mongodb-arbiter
      uid: e4b89fb2-4f8a-4451-8710-f0bc549c43e2
    resourceVersion: "1789878"
    uid: 406589f0-04ca-4b54-97c2-d464b7dea7c0
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: arbiter
                app.kubernetes.io/instance: helm-mongodb
                app.kubernetes.io/name: mongodb
            namespaces:
            - lab-ns-2
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - env:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: K8S_SERVICE_NAME
        value: helm-mongodb-arbiter-headless
      - name: MONGODB_REPLICA_SET_MODE
        value: arbiter
      - name: MONGODB_INITIAL_PRIMARY_HOST
        value: helm-mongodb-0.helm-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local
      - name: MONGODB_REPLICA_SET_NAME
        value: rs0
      - name: MONGODB_ADVERTISED_HOSTNAME
        value: $(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
      - name: MONGODB_PORT_NUMBER
        value: "27017"
      - name: MONGODB_ENABLE_IPV6
        value: "no"
      - name: MONGODB_INITIAL_PRIMARY_ROOT_USER
        value: root
      - name: MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mongodb-root-password
            name: helm-mongodb
      - name: MONGODB_REPLICA_SET_KEY
        valueFrom:
          secretKeyRef:
            key: mongodb-replica-set-key
            name: helm-mongodb
      - name: ALLOW_EMPTY_PASSWORD
        value: "no"
      image: docker.io/bitnami/mongodb:6.0.1-debian-11-r11
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        tcpSocket:
          port: mongodb
        timeoutSeconds: 10
      name: mongodb-arbiter
      ports:
      - containerPort: 27017
        name: mongodb
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        tcpSocket:
          port: mongodb
        timeoutSeconds: 10
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tdnw8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: helm-mongodb-arbiter-0
    nodeName: ip-192-168-60-70.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: helm-mongodb
    serviceAccountName: helm-mongodb
    subdomain: helm-mongodb-arbiter-headless
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-tdnw8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-09-27T16:54:01Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a4b56873b91ef7cdf9d68472fa99a374231fb2c7a6170da848eee34cf38fdc26
      image: bitnami/mongodb:6.0.1-debian-11-r11
      imageID: docker-pullable://bitnami/mongodb@sha256:db5dba8b08569fcfe0c707c5e795ed7d6a835d3214cde94f16485fb3bf0a7e3a
      lastState: {}
      name: mongodb-arbiter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2022-09-27T16:54:02Z"
    hostIP: 192.168.60.70
    phase: Running
    podIP: 192.168.57.106
    podIPs:
    - ip: 192.168.57.106
    qosClass: BestEffort
    startTime: "2022-09-27T16:54:01Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: helm-mongodb
      meta.helm.sh/release-namespace: lab-ns-2
    creationTimestamp: "2022-09-27T16:54:01Z"
    labels:
      app.kubernetes.io/component: arbiter
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-13.1.5
    name: helm-mongodb-arbiter-headless
    namespace: lab-ns-2
    resourceVersion: "1789771"
    uid: 0d17f92d-abf6-41ab-be7d-79d8d62c4bc3
  spec:
    clusterIP: None
    clusterIPs:
    - None
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-mongodb
      port: 27017
      protocol: TCP
      targetPort: mongodb
    selector:
      app.kubernetes.io/component: arbiter
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/name: mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: helm-mongodb
      meta.helm.sh/release-namespace: lab-ns-2
    creationTimestamp: "2022-09-27T16:54:01Z"
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-13.1.5
    name: helm-mongodb-headless
    namespace: lab-ns-2
    resourceVersion: "1789770"
    uid: b6e52883-1dc1-42d2-9202-b10c3bb7a355
  spec:
    clusterIP: None
    clusterIPs:
    - None
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: mongodb
      port: 27017
      protocol: TCP
      targetPort: mongodb
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/name: mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: helm-mongodb
      meta.helm.sh/release-namespace: lab-ns-2
    creationTimestamp: "2022-09-27T16:54:01Z"
    generation: 1
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-13.1.5
    name: helm-mongodb
    namespace: lab-ns-2
    resourceVersion: "1790068"
    uid: ee37dbbe-7314-496d-a29c-d1d138d6eac7
  spec:
    podManagementPolicy: OrderedReady
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: mongodb
        app.kubernetes.io/instance: helm-mongodb
        app.kubernetes.io/name: mongodb
    serviceName: helm-mongodb-headless
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: mongodb
          app.kubernetes.io/instance: helm-mongodb
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: mongodb
          helm.sh/chart: mongodb-13.1.5
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: mongodb
                    app.kubernetes.io/instance: helm-mongodb
                    app.kubernetes.io/name: mongodb
                namespaces:
                - lab-ns-2
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - command:
          - /scripts/setup.sh
          env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MY_POD_HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: K8S_SERVICE_NAME
            value: helm-mongodb-headless
          - name: MONGODB_INITIAL_PRIMARY_HOST
            value: helm-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
          - name: MONGODB_REPLICA_SET_NAME
            value: rs0
          - name: MONGODB_ADVERTISED_HOSTNAME
            value: $(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
          - name: MONGODB_ROOT_USER
            value: root
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password
                name: helm-mongodb
          - name: MONGODB_REPLICA_SET_KEY
            valueFrom:
              secretKeyRef:
                key: mongodb-replica-set-key
                name: helm-mongodb
          - name: ALLOW_EMPTY_PASSWORD
            value: "no"
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: "0"
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: "no"
          - name: MONGODB_DISABLE_JAVASCRIPT
            value: "no"
          - name: MONGODB_ENABLE_JOURNAL
            value: "yes"
          - name: MONGODB_PORT_NUMBER
            value: "27017"
          - name: MONGODB_ENABLE_IPV6
            value: "no"
          - name: MONGODB_ENABLE_DIRECTORY_PER_DB
            value: "no"
          image: docker.io/bitnami/mongodb:6.0.1-debian-11-r11
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bitnami/scripts/ping-mongodb.sh
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
          name: mongodb
          ports:
          - containerPort: 27017
            name: mongodb
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bitnami/scripts/readiness-probe.sh
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: datadir
          - mountPath: /bitnami/scripts
            name: common-scripts
          - mountPath: /scripts/setup.sh
            name: scripts
            subPath: setup.sh
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: helm-mongodb
        serviceAccountName: helm-mongodb
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 360
            name: helm-mongodb-common-scripts
          name: common-scripts
        - configMap:
            defaultMode: 493
            name: helm-mongodb-scripts
          name: scripts
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        name: datadir
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 2
    currentRevision: helm-mongodb-7df87cc68
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updateRevision: helm-mongodb-7df87cc68
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: helm-mongodb
      meta.helm.sh/release-namespace: lab-ns-2
    creationTimestamp: "2022-09-27T16:54:01Z"
    generation: 1
    labels:
      app.kubernetes.io/component: arbiter
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-13.1.5
    name: helm-mongodb-arbiter
    namespace: lab-ns-2
    resourceVersion: "1789881"
    uid: e4b89fb2-4f8a-4451-8710-f0bc549c43e2
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: arbiter
        app.kubernetes.io/instance: helm-mongodb
        app.kubernetes.io/name: mongodb
    serviceName: helm-mongodb-arbiter-headless
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: arbiter
          app.kubernetes.io/instance: helm-mongodb
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: mongodb
          helm.sh/chart: mongodb-13.1.5
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: arbiter
                    app.kubernetes.io/instance: helm-mongodb
                    app.kubernetes.io/name: mongodb
                namespaces:
                - lab-ns-2
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: K8S_SERVICE_NAME
            value: helm-mongodb-arbiter-headless
          - name: MONGODB_REPLICA_SET_MODE
            value: arbiter
          - name: MONGODB_INITIAL_PRIMARY_HOST
            value: helm-mongodb-0.helm-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local
          - name: MONGODB_REPLICA_SET_NAME
            value: rs0
          - name: MONGODB_ADVERTISED_HOSTNAME
            value: $(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
          - name: MONGODB_PORT_NUMBER
            value: "27017"
          - name: MONGODB_ENABLE_IPV6
            value: "no"
          - name: MONGODB_INITIAL_PRIMARY_ROOT_USER
            value: root
          - name: MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password
                name: helm-mongodb
          - name: MONGODB_REPLICA_SET_KEY
            valueFrom:
              secretKeyRef:
                key: mongodb-replica-set-key
                name: helm-mongodb
          - name: ALLOW_EMPTY_PASSWORD
            value: "no"
          image: docker.io/bitnami/mongodb:6.0.1-debian-11-r11
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: mongodb
            timeoutSeconds: 10
          name: mongodb-arbiter
          ports:
          - containerPort: 27017
            name: mongodb
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: mongodb
            timeoutSeconds: 10
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: helm-mongodb
        serviceAccountName: helm-mongodb
        terminationGracePeriodSeconds: 30
    updateStrategy:
      type: RollingUpdate
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: helm-mongodb-arbiter-6dd54c4d96
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: helm-mongodb-arbiter-6dd54c4d96
    updatedReplicas: 1
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs
      volume.kubernetes.io/selected-node: ip-192-168-28-141.ec2.internal
    creationTimestamp: "2022-09-27T16:54:01Z"
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/name: mongodb
    name: datadir-helm-mongodb-0
    namespace: lab-ns-2
    resourceVersion: "1789821"
    uid: afa0cf76-f42f-4fda-a492-056d519c13a4
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 8Gi
    storageClassName: gp2
    volumeMode: Filesystem
    volumeName: pvc-afa0cf76-f42f-4fda-a492-056d519c13a4
  status:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    phase: Bound
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs
      volume.kubernetes.io/selected-node: ip-192-168-60-70.ec2.internal
    creationTimestamp: "2022-09-27T16:54:39Z"
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helm-mongodb
      app.kubernetes.io/name: mongodb
    name: datadir-helm-mongodb-1
    namespace: lab-ns-2
    resourceVersion: "1789961"
    uid: eabc69b5-03c0-4110-a3f3-e7213c7d86bd
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 8Gi
    storageClassName: gp2
    volumeMode: Filesystem
    volumeName: pvc-eabc69b5-03c0-4110-a3f3-e7213c7d86bd
  status:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    phase: Bound
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs
      volume.kubernetes.io/selected-node: ip-192-168-28-141.ec2.internal
    creationTimestamp: "2022-09-27T16:46:53Z"
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helmmongodb
      app.kubernetes.io/name: mongodb
    name: datadir-helmmongodb-0
    namespace: lab-ns-2
    resourceVersion: "1788440"
    uid: e9f7bdec-a55a-4953-8a60-04833c41353f
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 8Gi
    storageClassName: gp2
    volumeMode: Filesystem
    volumeName: pvc-e9f7bdec-a55a-4953-8a60-04833c41353f
  status:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    phase: Bound
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs
      volume.kubernetes.io/selected-node: ip-192-168-60-70.ec2.internal
    creationTimestamp: "2022-09-27T16:47:42Z"
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: helmmongodb
      app.kubernetes.io/name: mongodb
    name: datadir-helmmongodb-1
    namespace: lab-ns-2
    resourceVersion: "1788618"
    uid: 86f1fa98-007b-4777-9fd8-2a731eaa4c74
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 8Gi
    storageClassName: gp2
    volumeMode: Filesystem
    volumeName: pvc-86f1fa98-007b-4777-9fd8-2a731eaa4c74
  status:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    phase: Bound
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
